import { Command, OptionValues } from 'commander';
import { createInterface } from 'readline';
import * as dotenv from 'dotenv';
import { readFileSync } from 'fs';
import path from 'path';
import { checkRequiredEnvParams } from './settings';
import OpenAIConversationManager, {
  OpenAiAppConfig,
  OpenAiRequest,
  OpenAiRequestConfig,
  OpenAiResponse
} from '@azure-typescript-e2e-apps/lib-openai';


function startConversation(): void {
  const program: Command = new Command();
  const readEachLine = createInterface({
    input: process.stdin,
    output: process.stdout
  });

  program
    .name('conversation')
    .description(
      `A conversation loop

        Examples: 
        index.js -d 'myfile.txt' -e '.env'        Start convo with text from file with settings from .env file
    `
    )
    .option('-i, --inputText <text>', 'Quote-delimited input text')
    .option(
      '-d, --dataFile <filename>',
      'Read content from a file. If both input and data file are provided, both are sent with initial request. Only input is sent with subsequent requests.'
    )
    .option(
      '-e, --envFile <filename>',
      'Load environment variables from a file. Prefer .env to individual option switches. If both are sent, .env is used only.'
    )
    .option('-se, --endpoint <endpoint>', 'Setting: OpenAI API endpoint')
    .option('-sk, --key <key>', 'Setting: OpenAI API key')
    .option('-sd, --deployment <deployment>', 'Setting: OpenAI API deployment')
    .option('-sv, --version <api version>', 'Setting: OpenAI API version')
    .option(
      '-sp, --prompt <system prompt>',
      'Setting: OpenAI API system prompt for deployment'
    )
    .helpOption('-h, --help', 'Display help')
    .action((options: OptionValues) => {
      console.log('options: ', options);

      // standard usage - v1
      const { dataFile, envFile } = options;

      if (!dataFile && !envFile) {
        process.stdout.write(
          'Missing data file and environment variables. Exiting...'
        );
        process.exit();
      }

      // env file
      const envPath = path.join(__dirname, '../', options.envFile);
      dotenv.config({
        path: envPath
      });
      const envErrors: string[] = checkRequiredEnvParams(
        process.env as Record<string, string>
      );
      if (envErrors.length > 0) {
        process.stdout.write(envErrors.join('\n'));
        process.exit();
      }

      // data file
      const dataPath = path.join(__dirname, '../', options.dataFile);
      const initialPrompt = readFileSync(dataPath, 'utf8');
      if (!initialPrompt) {
        process.stdout.write(
          `Initial prompt from ${options.dataFile} is empty. Exiting...`
        );
        process.exit();
      }

      const appOptions: OpenAiAppConfig = {
        apiVersion: process.env.AZURE_OPENAI_API_VERSION as string,
        endpoint: process.env.AZURE_OPENAI_ENDPOINT as string,
        apiKey: process.env.AZURE_OPENAI_API_KEY as string,
        deployment: process.env.AZURE_OPENAI_DEPLOYMENT as string
      };

      const initialRequest = {
        userText: initialPrompt,
        assistantText: 'How can I help?',
        appOptions: appOptions,
        requestOptions: undefined,
        initialized: false
      };
      // Initial conversation manager
      const openAiManager = new OpenAIConversationManager(
        initialRequest.appOptions.endpoint,
        initialRequest.appOptions.apiKey,
        initialRequest.appOptions.deployment,
        initialRequest.appOptions.apiVersion
      );

      process.stdout.write(
        `${initialRequest.assistantText} (type "exit" to quit): `
      );
      initialRequest.initialized = true;
        
      }
    });
    readEachLine.prompt();

    readEachLine.on('line', (input: Buffer) => {
      const userInput: string = input.toString().trim();

      if (userInput.toLowerCase() === 'exit') {
        process.stdout.write('Exiting...');
        process.exit();
      } else {
        // process user input
        
      }
    });

    program.parse(process.argv);
}

startConversation();
